{"metadata":{"name":"FP Growth Tree Tutorial","user_save_timestamp":"1970-01-01T08:00:00.000Z","auto_save_timestamp":"1970-01-01T08:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customSparkConf":null},"cells":[{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"import org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.fpm.{FPGrowth, FPGrowthModel}\nval rawData = sc.textFile(\"/home/david/spark/test.trans\")\nrawData.first()","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.fpm.{FPGrowth, FPGrowthModel}\nrawData: org.apache.spark.rdd.RDD[String] = /home/david/spark/test.trans MapPartitionsRDD[1] at textFile at <console>:39\nres1: String = 7786 7750 7778\n"},{"metadata":{},"data":{"text/html":"7786 7750 7778\n <div class='pull-right text-info'><small>1 second 183 milliseconds</small></div>"},"output_type":"execute_result","execution_count":1}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val rawRatings = rawData.map(line => line.split(\" \")).collect().toSeq\nval rdd = sc.parallelize(rawRatings, 2).cache()\nval fpg = new FPGrowth()\n\n    val model = fpg\n      .setMinSupport(0.1)\n      .setNumPartitions(2)\n      .run(rdd)\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"rawRatings: Seq[Array[String]] = WrappedArray(Array(7786, 7750, 7778), Array(2878), Array(7652), Array(7782), Array(7652), Array(7652), Array(7652), Array(61057, 7782, 61059), Array(7652, 7782), Array(7782), Array(7750), Array(3117, 2878, 7650, 7786, 61006, 61170, 7750), Array(7652, 7782), Array(7652, 7772), Array(7786, 3117, 7782, 7750), Array(7786, 3117))\nrdd: org.apache.spark.rdd.RDD[Array[String]] = ParallelCollectionRDD[3] at parallelize at <console>:42\nfpg: org.apache.spark.mllib.fpm.FPGrowth = org.apache.spark.mllib.fpm.FPGrowth@231988c8\nmodel: org.apache.spark.mllib.fpm.FPGrowthModel[String] = org.apache.spark.mllib.fpm.FPGrowthModel@32512f2d\n"},{"metadata":{},"data":{"text/html":"org.apache.spark.mllib.fpm.FPGrowthModel@32512f2d\n <div class='pull-right text-info'><small>658 milliseconds</small></div>"},"output_type":"execute_result","execution_count":2}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"    val freqItemsets3 = model.freqItemsets.collect().map { itemset =>      \n      if(itemset.items.size >= 2){\n        println(itemset.items.mkString(\"[\", \",\", \"]\") + \", \" + itemset.freq)\n      }\n    }","outputs":[{"name":"stdout","output_type":"stream","text":"[3117,7786], 3\n[3117,7750], 2\n[3117,7750,7786], 2\n[7782,7652], 2\n[7750,7786], 3\nfreqItemsets3: Array[Unit] = Array((), (), (), (), (), (), (), (), (), (), ())\n"},{"metadata":{},"data":{"text/html":"[Lscala.runtime.BoxedUnit;@6132a9c0\n <div class='pull-right text-info'><small>451 milliseconds</small></div>"},"output_type":"execute_result","execution_count":3}]}],"nbformat":4}