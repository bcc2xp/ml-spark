{"metadata":{"name":"Collaborative Filtering Tutorial","user_save_timestamp":"1970-01-01T08:00:00.000Z","auto_save_timestamp":"1970-01-01T08:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customSparkConf":null},"cells":[{"metadata":{},"cell_type":"markdown","source":"## 讀取第一列資料"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val rawData = sc.textFile(\"/home/david/spark/ml-100k/u.data\")\nrawData.first() ","outputs":[{"name":"stdout","output_type":"stream","text":"rawData: org.apache.spark.rdd.RDD[String] = /home/david/spark/ml-100k/u.data MapPartitionsRDD[1] at textFile at <console>:37\nres1: String = 196\t242\t3\t881250949\n"},{"metadata":{},"data":{"text/html":"196\t242\t3\t881250949\n <div class='pull-right text-info'><small>3 seconds 18 milliseconds</small></div>"},"output_type":"execute_result","execution_count":1}]},{"metadata":{},"cell_type":"markdown","source":"## 讀取 user id, movie id, ratings"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val rawRatings = rawData.map(_.split(\"\\t\").take(3))","outputs":[{"name":"stdout","output_type":"stream","text":"rawRatings: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[2] at map at <console>:39\n"},{"metadata":{},"data":{"text/html":"MapPartitionsRDD[2] at map at &lt;console&gt;:39\n <div class='pull-right text-info'><small>574 milliseconds</small></div>"},"output_type":"execute_result","execution_count":2}]},{"metadata":{},"cell_type":"markdown","source":"## 將讀取資料讀進Rating 物件"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"import org.apache.spark.mllib.recommendation.ALS\nimport org.apache.spark.mllib.recommendation.Rating\n\nval ratings = rawRatings.map { case Array(user, movie, rating) =>\nRating(user.toInt, movie.toInt, rating.toDouble) }","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.recommendation.ALS\nimport org.apache.spark.mllib.recommendation.Rating\nratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[3] at map at <console>:44\n"},{"metadata":{},"data":{"text/html":"MapPartitionsRDD[3] at map at &lt;console&gt;:44\n <div class='pull-right text-info'><small>864 milliseconds</small></div>"},"output_type":"execute_result","execution_count":3}]},{"metadata":{},"cell_type":"markdown","source":"## 訓練ALS 模型"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val model = ALS.train(ratings, 50, 10, 0.01)","outputs":[{"name":"stdout","output_type":"stream","text":"model: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@6aaa7474\n"},{"metadata":{},"data":{"text/html":"org.apache.spark.mllib.recommendation.MatrixFactorizationModel@6aaa7474\n <div class='pull-right text-info'><small>5 seconds 627 milliseconds</small></div>"},"output_type":"execute_result","execution_count":4}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"model.productFeatures","outputs":[{"name":"stdout","output_type":"stream","text":"res2: org.apache.spark.rdd.RDD[(Int, Array[Double])] = products MapPartitionsRDD[210] at mapValues at ALS.scala:239\n"},{"metadata":{},"data":{"text/html":"products MapPartitionsRDD[210] at mapValues at ALS.scala:239\n <div class='pull-right text-info'><small>338 milliseconds</small></div>"},"output_type":"execute_result","execution_count":5}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"model.userFeatures.count","outputs":[{"name":"stdout","output_type":"stream","text":"res3: Long = 943\n"},{"metadata":{},"data":{"text/html":"943\n <div class='pull-right text-info'><small>534 milliseconds</small></div>"},"output_type":"execute_result","execution_count":6}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"println(model.userFeatures.count)\nprintln(model.productFeatures.count)","outputs":[{"name":"stdout","output_type":"stream","text":"943\n1682\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>482 milliseconds</small></div>"},"output_type":"execute_result","execution_count":7}]},{"metadata":{},"cell_type":"markdown","source":"## 求出使用者對該商品的評分"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val predictedRating = model.predict(789, 123)","outputs":[{"name":"stdout","output_type":"stream","text":"predictedRating: Double = 4.103747659665332\n"},{"metadata":{},"data":{"text/html":"4.103747659665332\n <div class='pull-right text-info'><small>412 milliseconds</small></div>"},"output_type":"execute_result","execution_count":20}]},{"metadata":{},"cell_type":"markdown","source":"##求得top-k 的結果"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val userId = 789\nval K = 10\nval topKRecs = model.recommendProducts(userId, K)","outputs":[{"name":"stdout","output_type":"stream","text":"userId: Int = 789\nK: Int = 10\ntopKRecs: Array[org.apache.spark.mllib.recommendation.Rating] = Array(Rating(789,675,6.087864799280203), Rating(789,346,5.855805219946133), Rating(789,518,5.579672430780757), Rating(789,1073,5.467321167314365), Rating(789,492,5.303473635804268), Rating(789,179,5.239072012410619), Rating(789,185,5.212228017940462), Rating(789,187,5.133779068533682), Rating(789,447,5.133447417763864), Rating(789,39,5.12303298888304))\n"},{"metadata":{},"data":{"text/html":"[Lorg.apache.spark.mllib.recommendation.Rating;@5538fe6a\n <div class='pull-right text-info'><small>349 milliseconds</small></div>"},"output_type":"execute_result","execution_count":9}]},{"metadata":{},"cell_type":"markdown","source":"## 檢視推薦結果"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val movies = sc.textFile(\"/home/david/spark/ml-100k/u.item\")\nval titles = movies.map(line => line.split(\"\\\\|\").take(2)).map(array\n=> (array(0).toInt, array(1))).collectAsMap()\ntitles(123)","outputs":[{"name":"stdout","output_type":"stream","text":"movies: org.apache.spark.rdd.RDD[String] = /home/david/spark/ml-100k/u.item MapPartitionsRDD[216] at textFile at <console>:39\ntitles: scala.collection.Map[Int,String] = Map(137 -> Big Night (1996), 891 -> Bent (1997), 550 -> Die Hard: With a Vengeance (1995), 1205 -> Secret Agent, The (1996), 146 -> Unhook the Stars (1996), 864 -> My Fellow Americans (1996), 559 -> Interview with the Vampire (1994), 218 -> Cape Fear (1991), 568 -> Speed (1994), 227 -> Star Trek VI: The Undiscovered Country (1991), 765 -> Boomerang (1992), 1115 -> Twelfth Night (1996), 774 -> Prophecy, The (1995), 433 -> Heathers (1989), 92 -> True Romance (1993), 1528 -> Nowhere (1997), 846 -> To Gillian on Her 37th Birthday (1996), 1187 -> Switchblade Sisters (1975), 1501 -> Prisoner of the Mountains (Kavkazsky Plennik..."},{"metadata":{},"data":{"text/html":"Frighteners, The (1996)\n <div class='pull-right text-info'><small>762 milliseconds</small></div>"},"output_type":"execute_result","execution_count":10}]},{"metadata":{},"cell_type":"markdown","source":"## 檢視使用者789看了哪些電影"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val moviesForUser = ratings.keyBy(_.user).lookup(789)\nprintln(moviesForUser.size)","outputs":[{"name":"stdout","output_type":"stream","text":"33\nmoviesForUser: Seq[org.apache.spark.mllib.recommendation.Rating] = WrappedArray(Rating(789,1012,4.0), Rating(789,127,5.0), Rating(789,475,5.0), Rating(789,93,4.0), Rating(789,1161,3.0), Rating(789,286,1.0), Rating(789,293,4.0), Rating(789,9,5.0), Rating(789,50,5.0), Rating(789,294,3.0), Rating(789,181,4.0), Rating(789,1,3.0), Rating(789,1008,4.0), Rating(789,508,4.0), Rating(789,284,3.0), Rating(789,1017,3.0), Rating(789,137,2.0), Rating(789,111,3.0), Rating(789,742,3.0), Rating(789,248,3.0), Rating(789,249,3.0), Rating(789,1007,4.0), Rating(789,591,3.0), Rating(789,150,5.0), Rating(789,276,5.0), Rating(789,151,2.0), Rating(789,129,5.0), Rating(789,100,5.0), Rating(789,741,5.0), Rating(789,288,3.0), Rating(789,762,3.0), Rating(789,628,3.0), Rating(789,124,4.0))\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>542 milliseconds</small></div>"},"output_type":"execute_result","execution_count":11}]},{"metadata":{},"cell_type":"markdown","source":"## 比對使用者評分資料與推薦結果"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"moviesForUser.sortBy(-_.rating).take(10).map(rating => \n(titles(rating.product), rating.rating)).foreach(println)\n\ntopKRecs.map(rating => (titles(rating.product), rating.rating)).\nforeach(println)","outputs":[{"name":"stdout","output_type":"stream","text":"(Godfather, The (1972),5.0)\n(Trainspotting (1996),5.0)\n(Dead Man Walking (1995),5.0)\n(Star Wars (1977),5.0)\n(Swingers (1996),5.0)\n(Leaving Las Vegas (1995),5.0)\n(Bound (1996),5.0)\n(Fargo (1996),5.0)\n(Last Supper, The (1995),5.0)\n(Private Parts (1997),4.0)\n(Nosferatu (Nosferatu, eine Symphonie des Grauens) (1922),6.087864799280203)\n(Jackie Brown (1997),5.855805219946133)\n(Miller's Crossing (1990),5.579672430780757)\n(Shallow Grave (1994),5.467321167314365)\n(East of Eden (1955),5.303473635804268)\n(Clockwork Orange, A (1971),5.239072012410619)\n(Psycho (1960),5.212228017940462)\n(Godfather: Part II, The (1974),5.133779068533682)\n(Carrie (1976),5.133447417763864)\n(Strange Days (1995),5.12303298888304)\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>613 milliseconds</small></div>"},"output_type":"execute_result","execution_count":13}]},{"metadata":{},"cell_type":"markdown","source":"## 建立計算cosine similarity 的公式"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"import org.jblas.DoubleMatrix\nval aMatrix = new DoubleMatrix(Array(1.0, 2.0, 3.0))\n\ndef cosineSimilarity(vec1: DoubleMatrix, vec2: DoubleMatrix): Double =\n{\nvec1.dot(vec2) / (vec1.norm2() * vec2.norm2())\n}","outputs":[{"name":"stdout","output_type":"stream","text":"import org.jblas.DoubleMatrix\naMatrix: org.jblas.DoubleMatrix = [1.000000; 2.000000; 3.000000]\ncosineSimilarity: (vec1: org.jblas.DoubleMatrix, vec2: org.jblas.DoubleMatrix)Double\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>143 milliseconds</small></div>"},"output_type":"execute_result","execution_count":16}]},{"metadata":{},"cell_type":"markdown","source":"## 計算物品間的相似度"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val itemId = 567\nval itemFactor = model.productFeatures.lookup(itemId).head\nval itemVector = new DoubleMatrix(itemFactor)\ncosineSimilarity(itemVector, itemVector)","outputs":[{"name":"stdout","output_type":"stream","text":"itemId: Int = 567\nitemFactor: Array[Double] = Array(-0.4848737418651581, 1.21510910987854, 0.41232365369796753, -0.659217894077301, -0.17597872018814087, -0.4396769106388092, -0.31917113065719604, 0.3317810893058777, 0.9209818840026855, -0.12217741459608078, -0.0055986978113651276, -0.002151913708075881, -0.728996992111206, 0.05977635458111763, -0.28367555141448975, -0.06262418627738953, -0.6670700907707214, -0.49176186323165894, 0.1513391137123108, 0.3710854947566986, -0.6679885983467102, 0.991594672203064, -0.1443294882774353, -0.7090641260147095, -0.20199358463287354, 0.2586132287979126, -0.48937341570854187, 0.7999700307846069, 0.4324796497821808, 0.7192336320877075, -0.13720068335533142, -0.6724040508270264, 0.86402428150177, -0.3939986228942871, 0.46807870268821716, -0.74386519193..."},{"metadata":{},"data":{"text/html":"0.9999999999999998\n <div class='pull-right text-info'><small>364 milliseconds</small></div>"},"output_type":"execute_result","execution_count":17}]},{"metadata":{},"cell_type":"markdown","source":"## 計算物品與其他物品的相似度"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val sims = model.productFeatures.map{ \n  case (id, factor) =>\nval factorVector = new DoubleMatrix(factor)\nval sim = cosineSimilarity(factorVector, itemVector)\n(id, sim)\n}\n\nval sortedSims = sims.top(K)(Ordering.by[(Int, Double), Double] { \n  case(id, similarity) => similarity })","outputs":[{"name":"stdout","output_type":"stream","text":"sims: org.apache.spark.rdd.RDD[(Int, Double)] = MapPartitionsRDD[222] at map at <console>:59\nsortedSims: Array[(Int, Double)] = Array((567,0.9999999999999998), (184,0.7374966435288661), (413,0.7299613887256559), (550,0.7200587463204995), (940,0.7186812133479588), (219,0.7156623412796511), (933,0.7109458388047804), (1169,0.7040987611365095), (670,0.7022076442061858), (563,0.7009908444452448))\n"},{"metadata":{},"data":{"text/html":"[Lscala.Tuple2;@6c180580\n <div class='pull-right text-info'><small>542 milliseconds</small></div>"},"output_type":"execute_result","execution_count":18}]},{"metadata":{},"cell_type":"markdown","source":"## 取出前十相似的商品"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"println(sortedSims.take(10).mkString(\"\\n\"))","outputs":[{"name":"stdout","output_type":"stream","text":"(567,0.9999999999999998)\n(184,0.7374966435288661)\n(413,0.7299613887256559)\n(550,0.7200587463204995)\n(940,0.7186812133479588)\n(219,0.7156623412796511)\n(933,0.7109458388047804)\n(1169,0.7040987611365095)\n(670,0.7022076442061858)\n(563,0.7009908444452448)\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>321 milliseconds</small></div>"},"output_type":"execute_result","execution_count":19}]},{"metadata":{},"cell_type":"markdown","source":"## 檢視相似的商品"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val sortedSims2 = sims.top(K + 1)(Ordering.by[(Int, Double), Double] {\ncase (id, similarity) => similarity })\nsortedSims2.slice(1, 11).map{ case (id, sim) => (titles(id), sim)\n}.mkString(\"\\n\")","outputs":[{"name":"stdout","output_type":"stream","text":"sortedSims2: Array[(Int, Double)] = Array((567,0.9999999999999998), (184,0.7374966435288661), (413,0.7299613887256559), (550,0.7200587463204995), (940,0.7186812133479588), (219,0.7156623412796511), (933,0.7109458388047804), (1169,0.7040987611365095), (670,0.7022076442061858), (563,0.7009908444452448), (1471,0.6989687871789855))\nres14: String =\n(Army of Darkness (1993),0.7374966435288661)\n(Tales from the Crypt Presents: Bordello of Blood (1996),0.7299613887256559)\n(Die Hard: With a Vengeance (1995),0.7200587463204995)\n(Airheads (1994),0.7186812133479588)\n(Nightmare on Elm Street, A (1984),0.7156623412796511)\n(Funeral, The (1996),0.7109458388047804)\n(Fresh (1994),0.7040987611365095)\n(Body Snatchers (1993),0.7022076442061858)\n(Stephen King's The Langoliers (1995),0.7009908444452448)\n(Hidea..."},{"metadata":{},"data":{"text/html":"(Army of Darkness (1993),0.7374966435288661)\n(Tales from the Crypt Presents: Bordello of Blood (1996),0.7299613887256559)\n(Die Hard: With a Vengeance (1995),0.7200587463204995)\n(Airheads (1994),0.7186812133479588)\n(Nightmare on Elm Street, A (1984),0.7156623412796511)\n(Funeral, The (1996),0.7109458388047804)\n(Fresh (1994),0.7040987611365095)\n(Body Snatchers (1993),0.7022076442061858)\n(Stephen King's The Langoliers (1995),0.7009908444452448)\n(Hideaway (1995),0.6989687871789855)\n <div class='pull-right text-info'><small>422 milliseconds</small></div>"},"output_type":"execute_result","execution_count":23}]},{"metadata":{},"cell_type":"markdown","source":"## 計算實際值與預測值的誤差"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val actualRating = moviesForUser.take(10){0}\nval predictedRating = model.predict(789, actualRating.product)\nval squaredError = math.pow(predictedRating - actualRating.rating,2.0)","outputs":[{"name":"stdout","output_type":"stream","text":"actualRating: org.apache.spark.mllib.recommendation.Rating = Rating(789,1012,4.0)\npredictedRating: Double = 3.979255636814044\nsquaredError: Double = 4.303286039908495E-4\n"},{"metadata":{},"data":{"text/html":"4.303286039908495E-4\n <div class='pull-right text-info'><small>307 milliseconds</small></div>"},"output_type":"execute_result","execution_count":24}]},{"metadata":{},"cell_type":"markdown","source":"## 計算所有使用者對商品的分數"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val usersProducts = ratings.map{ case Rating(user, product, rating) => (user, product)}\nval predictions = model.predict(usersProducts).map{\ncase Rating(user, product, rating) => ((user, product), rating)\n}","outputs":[{"name":"stdout","output_type":"stream","text":"usersProducts: org.apache.spark.rdd.RDD[(Int, Int)] = MapPartitionsRDD[226] at map at <console>:49\npredictions: org.apache.spark.rdd.RDD[((Int, Int), Double)] = MapPartitionsRDD[235] at map at <console>:50\n"},{"metadata":{},"data":{"text/html":"MapPartitionsRDD[235] at map at &lt;console&gt;:50\n <div class='pull-right text-info'><small>262 milliseconds</small></div>"},"output_type":"execute_result","execution_count":25}]},{"metadata":{},"cell_type":"markdown","source":"## 將實際分數與預測分數結果做合併\n"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val ratingsAndPredictions = ratings.map{\ncase Rating(user, product, rating) => ((user, product), rating)\n}.join(predictions)\n","outputs":[{"name":"stdout","output_type":"stream","text":"ratingsAndPredictions: org.apache.spark.rdd.RDD[((Int, Int), (Double, Double))] = MapPartitionsRDD[239] at join at <console>:55\n"},{"metadata":{},"data":{"text/html":"MapPartitionsRDD[239] at join at &lt;console&gt;:55\n <div class='pull-right text-info'><small>239 milliseconds</small></div>"},"output_type":"execute_result","execution_count":26}]},{"metadata":{},"cell_type":"markdown","source":"## 計算真實值與預測值之間的MSE"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val MSE = ratingsAndPredictions.map{\ncase ((user, product), (actual, predicted)) => math.pow((actual -\npredicted), 2)\n}.reduce(_ + _) / ratingsAndPredictions.count\nprintln(\"Mean Squared Error = \" + MSE)","outputs":[{"name":"stdout","output_type":"stream","text":"Mean Squared Error = 0.08574871231407029\nMSE: Double = 0.08574871231407029\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>2 seconds 901 milliseconds</small></div>"},"output_type":"execute_result","execution_count":27}]},{"metadata":{},"cell_type":"markdown","source":"## 計算Root Mean Square Error"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"import org.apache.spark.mllib.evaluation.RegressionMetrics\nval predictedAndTrue = ratingsAndPredictions.map { case ((user,\nproduct), (predicted, actual)) => (predicted, actual) }\nval regressionMetrics = new RegressionMetrics(predictedAndTrue)\n\nprintln(\"Mean Squared Error = \" + regressionMetrics.meanSquaredError)\nprintln(\"Root Mean Squared Error = \" + regressionMetrics.\nrootMeanSquaredError)","outputs":[{"name":"stdout","output_type":"stream","text":"Mean Squared Error = 0.08574871231407027\nRoot Mean Squared Error = 0.29282881059429633\nimport org.apache.spark.mllib.evaluation.RegressionMetrics\npredictedAndTrue: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[241] at map at <console>:56\nregressionMetrics: org.apache.spark.mllib.evaluation.RegressionMetrics = org.apache.spark.mllib.evaluation.RegressionMetrics@2e88f8e3\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>726 milliseconds</small></div>"},"output_type":"execute_result","execution_count":29}]},{"metadata":{},"cell_type":"markdown","source":"## 計算 Mean average precision at K"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val predictedMovies = topKRecs.map(_.product)\nval predK = predictedMovies.take(10)\nvar score = 0.0\nvar numHits = 0.0\n","outputs":[{"name":"stdout","output_type":"stream","text":"predictedMovies: Array[Int] = Array(675, 346, 518, 1073, 492, 179, 185, 187, 447, 39)\npredK: Array[Int] = Array(675, 346, 518, 1073, 492, 179, 185, 187, 447, 39)\nscore: Double = 0.0\nnumHits: Double = 0.0\n"},{"metadata":{},"data":{"text/html":"0.0\n <div class='pull-right text-info'><small>344 milliseconds</small></div>"},"output_type":"execute_result","execution_count":30}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val actual = moviesForUser.map(_.product)\nfor ((p, i) <- predK.zipWithIndex) {\nif (actual.contains(p)) {\nnumHits += 1.0\nscore += numHits / (i.toDouble + 1.0)\n  println\n}\n}\npredK.zipWithIndex","outputs":[{"name":"stdout","output_type":"stream","text":"actual: Seq[Int] = ArrayBuffer(1012, 127, 475, 93, 1161, 286, 293, 9, 50, 294, 181, 1, 1008, 508, 284, 1017, 137, 111, 742, 248, 249, 1007, 591, 150, 276, 151, 129, 100, 741, 288, 762, 628, 124)\nres18: Array[(Int, Int)] = Array((675,0), (346,1), (518,2), (1073,3), (492,4), (179,5), (185,6), (187,7), (447,8), (39,9))\n"},{"metadata":{},"data":{"text/html":"[Lscala.Tuple2;@13f85276\n <div class='pull-right text-info'><small>436 milliseconds</small></div>"},"output_type":"execute_result","execution_count":31}]},{"metadata":{},"cell_type":"markdown","source":"## 計算真實值與預測值的MAPK"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"def avgPrecisionK(actual: Seq[Int], predicted: Seq[Int], k: Int):\nDouble = {\n  val predK = predicted.take(k)\n  var score = 0.0\n  var numHits = 0.0\n  for ((p, i) <- predK.zipWithIndex) {\n    if (actual.contains(p)) {\n      numHits += 1.0\n      score += numHits / (i.toDouble + 1.0)\n    }\n  }\n  if (actual.isEmpty) {\n  1.0\n  } else {\n  score / scala.math.min(actual.size, k).toDouble\n  }\n}","outputs":[{"name":"stdout","output_type":"stream","text":"avgPrecisionK: (actual: Seq[Int], predicted: Seq[Int], k: Int)Double\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>203 milliseconds</small></div>"},"output_type":"execute_result","execution_count":32}]},{"metadata":{},"cell_type":"markdown","source":"## 計算真實值與預測值的MAPK"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val actualMovies = moviesForUser.map(_.product)\nval predictedMovies = topKRecs.map(_.product)\nval apk10 = avgPrecisionK(actualMovies, predictedMovies, 10)","outputs":[{"name":"stdout","output_type":"stream","text":"actualMovies: Seq[Int] = ArrayBuffer(1012, 127, 475, 93, 1161, 286, 293, 9, 50, 294, 181, 1, 1008, 508, 284, 1017, 137, 111, 742, 248, 249, 1007, 591, 150, 276, 151, 129, 100, 741, 288, 762, 628, 124)\npredictedMovies: Array[Int] = Array(675, 346, 518, 1073, 492, 179, 185, 187, 447, 39)\napk10: Double = 0.0\n"},{"metadata":{},"data":{"text/html":"0.0\n <div class='pull-right text-info'><small>307 milliseconds</small></div>"},"output_type":"execute_result","execution_count":33}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val predictedMovies = topKRecs.map(_.product)","outputs":[{"name":"stdout","output_type":"stream","text":"predictedMovies: Array[Int] = Array(675, 346, 518, 1073, 492, 179, 185, 187, 447, 39)\n"},{"metadata":{},"data":{"text/html":"[I@17eb7cc1\n <div class='pull-right text-info'><small>214 milliseconds</small></div>"},"output_type":"execute_result","execution_count":34}]},{"metadata":{},"cell_type":"markdown","source":"## 為每個使用者計算MAPK"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val itemFactors = model.productFeatures.map { case (id, factor) =>\nfactor }.collect()\nval itemMatrix = new DoubleMatrix(itemFactors)\nprintln(itemMatrix.rows, itemMatrix.columns)\n//將item matrix broadcast 給每個node\nval imBroadcast = sc.broadcast(itemMatrix)","outputs":[{"name":"stdout","output_type":"stream","text":"(1682,50)\nitemFactors: Array[Array[Double]] = Array(Array(-0.07059755176305771, 1.9397852420806885, 0.9188723564147949, 0.27243489027023315, -0.9787905812263489, -0.7483048439025879, -0.4934738278388977, 1.1444156169891357, 0.47328051924705505, 0.061552491039037704, -0.28671324253082275, 0.46603715419769287, -1.8124104738235474, -0.3161487877368927, -0.6405762434005737, 0.13522331416606903, -0.3416319787502289, -0.2805001437664032, 0.28228822350502014, 1.155129075050354, -0.4815400242805481, 0.06953863799571991, 0.00417054770514369, -0.9310985803604126, 0.4473211169242859, 1.1287111043930054, -0.13981382548809052, 0.8692690134048462, 0.6884519457817078, 1.2411255836486816, 0.40812912583351135, -0.40044280886650085, 0.1884467601776123, -0.3777976632118225, 0.8237225413322449, 0.2601141333580017, 0..."},{"metadata":{},"data":{"text/html":"Broadcast(59)\n <div class='pull-right text-info'><small>671 milliseconds</small></div>"},"output_type":"execute_result","execution_count":35}]},{"metadata":{},"cell_type":"markdown","source":"## 求出每位使用者推薦結果"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val allRecs = model.userFeatures.map{ case (userId, array) =>\nval userVector = new DoubleMatrix(array)\nval scores = imBroadcast.value.mmul(userVector)\nval sortedWithId = scores.data.zipWithIndex.sortBy(-_._1)\nval recommendedIds = sortedWithId.map(_._2 + 1).toSeq\n(userId, recommendedIds)\n}","outputs":[{"name":"stdout","output_type":"stream","text":"allRecs: org.apache.spark.rdd.RDD[(Int, Seq[Int])] = MapPartitionsRDD[244] at map at <console>:58\n"},{"metadata":{},"data":{"text/html":"MapPartitionsRDD[244] at map at &lt;console&gt;:58\n <div class='pull-right text-info'><small>285 milliseconds</small></div>"},"output_type":"execute_result","execution_count":36}]},{"metadata":{},"cell_type":"markdown","source":"## 計算真實排名與預測排名的MAPK"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val userMovies = ratings.map{ case Rating(user, product, rating) =>\n(user, product) }.groupBy(_._1)\n\nval K = 10\nval MAPK = allRecs.join(userMovies).map{ case (userId, (predicted,\nactualWithIds)) =>\nval actual = actualWithIds.map(_._2).toSeq\navgPrecisionK(actual, predicted, K)\n}.reduce(_ + _) / allRecs.count\nprintln(\"Mean Average Precision at K = \" + MAPK)","outputs":[{"name":"stdout","output_type":"stream","text":"Mean Average Precision at K = 0.027378595835647782\nuserMovies: org.apache.spark.rdd.RDD[(Int, Iterable[(Int, Int)])] = ShuffledRDD[247] at groupBy at <console>:79\nK: Int = 10\nMAPK: Double = 0.027378595835647782\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>2 seconds 979 milliseconds</small></div>"},"output_type":"execute_result","execution_count":37}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val userMovies = ratings.map{ case Rating(user, product, rating) =>\n(user, product) }.groupBy(_._1)\n\nval K = 2000\nval MAPK = allRecs.join(userMovies).map{ case (userId, (predicted,\nactualWithIds)) =>\nval actual = actualWithIds.map(_._2).toSeq\navgPrecisionK(actual, predicted, K)\n}.reduce(_ + _) / allRecs.count\nprintln(\"Mean Average Precision at K = \" + MAPK)","outputs":[{"name":"stdout","output_type":"stream","text":"Mean Average Precision at K = 0.07308594155673942\nuserMovies: org.apache.spark.rdd.RDD[(Int, Iterable[(Int, Int)])] = ShuffledRDD[275] at groupBy at <console>:86\nK: Int = 2000\nMAPK: Double = 0.07308594155673942\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>1 second 977 milliseconds</small></div>"},"output_type":"execute_result","execution_count":73}]},{"metadata":{},"cell_type":"markdown","source":"## 使用內建的RankingMetrics"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"import org.apache.spark.mllib.evaluation.RankingMetrics\nval predictedAndTrueForRanking = allRecs.join(userMovies).map{ case\n(userId, (predicted, actualWithIds)) =>\nval actual = actualWithIds.map(_._2)\n(predicted.toArray, actual.toArray)\n}\nval rankingMetrics = new RankingMetrics(predictedAndTrueForRanking)\nprintln(\"Mean Average Precision = \" + rankingMetrics.\nmeanAveragePrecision)","outputs":[{"name":"stdout","output_type":"stream","text":"Mean Average Precision = 0.07342007849626198\nimport org.apache.spark.mllib.evaluation.RankingMetrics\npredictedAndTrueForRanking: org.apache.spark.rdd.RDD[(Array[Int], Array[Int])] = MapPartitionsRDD[255] at map at <console>:67\nrankingMetrics: org.apache.spark.mllib.evaluation.RankingMetrics[Int] = org.apache.spark.mllib.evaluation.RankingMetrics@31f32d79\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>1 second 102 milliseconds</small></div>"},"output_type":"execute_result","execution_count":38}]}],"nbformat":4}