{"metadata":{"name":"Clustering Tutorial","user_save_timestamp":"1970-01-01T08:00:00.000Z","auto_save_timestamp":"1970-01-01T08:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customSparkConf":null},"cells":[{"metadata":{},"cell_type":"markdown","source":"## 取得資料"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val movies = sc.textFile(\"/home/david/spark/ml-100k/u.item\")\nprintln(movies.first)","outputs":[{"name":"stdout","output_type":"stream","text":"1|Toy Story (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0\nmovies: org.apache.spark.rdd.RDD[String] = /home/david/spark/ml-100k/u.item MapPartitionsRDD[1] at textFile at <console>:37\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>855 milliseconds</small></div>"},"output_type":"execute_result","execution_count":1}]},{"metadata":{},"cell_type":"markdown","source":"## 取得標籤"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val genres = sc.textFile(\"/home/david/spark/ml-100k/u.genre\")\ngenres.take(5).foreach(println)","outputs":[{"name":"stdout","output_type":"stream","text":"unknown|0\nAction|1\nAdventure|2\nAnimation|3\nChildren's|4\ngenres: org.apache.spark.rdd.RDD[String] = /home/david/spark/ml-100k/u.genre MapPartitionsRDD[3] at textFile at <console>:37\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>591 milliseconds</small></div>"},"output_type":"execute_result","execution_count":2}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val genreMap = genres.filter(!_.isEmpty).map(line => line.\nsplit(\"\\\\|\")).map(array => (array(1), array(0))).collectAsMap\nprintln(genreMap)","outputs":[{"name":"stdout","output_type":"stream","text":"Map(2 -> Adventure, 5 -> Comedy, 12 -> Musical, 15 -> Sci-Fi, 8 -> Drama, 18 -> Western, 7 -> Documentary, 17 -> War, 1 -> Action, 4 -> Children's, 11 -> Horror, 14 -> Romance, 6 -> Crime, 0 -> unknown, 9 -> Fantasy, 16 -> Thriller, 3 -> Animation, 10 -> Film-Noir, 13 -> Mystery)\ngenreMap: scala.collection.Map[String,String] = Map(2 -> Adventure, 5 -> Comedy, 12 -> Musical, 15 -> Sci-Fi, 8 -> Drama, 18 -> Western, 7 -> Documentary, 17 -> War, 1 -> Action, 4 -> Children's, 11 -> Horror, 14 -> Romance, 6 -> Crime, 0 -> unknown, 9 -> Fantasy, 16 -> Thriller, 3 -> Animation, 10 -> Film-Noir, 13 -> Mystery)\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>619 milliseconds</small></div>"},"output_type":"execute_result","execution_count":3}]},{"metadata":{},"cell_type":"markdown","source":"## 列出標題與種類"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val titlesAndGenres = movies.map(_.split(\"\\\\|\")).map { array =>\nval genres = array.toSeq.slice(5, array.size)\nval genresAssigned = genres.zipWithIndex.filter { case (g, idx) =>\ng == \"1\"\n}.map { case (g, idx) =>\ngenreMap(idx.toString)\n}\n(array(0).toInt, (array(1), genresAssigned))\n}\nprintln(titlesAndGenres.first)","outputs":[{"name":"stdout","output_type":"stream","text":"(1,(Toy Story (1995),ArrayBuffer(Animation, Children's, Comedy)))\ntitlesAndGenres: org.apache.spark.rdd.RDD[(Int, (String, Seq[String]))] = MapPartitionsRDD[8] at map at <console>:43\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>787 milliseconds</small></div>"},"output_type":"execute_result","execution_count":4}]},{"metadata":{},"cell_type":"markdown","source":"## 建立 ALS 模型"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"import org.apache.spark.mllib.recommendation.ALS\nimport org.apache.spark.mllib.recommendation.Rating\nval rawData = sc.textFile(\"/home/david/spark/ml-100k/u.data\")\nval rawRatings = rawData.map(_.split(\"\\t\").take(3))\nval ratings = rawRatings.map{ case Array(user, movie, rating) => Rating(user.toInt, movie.toInt, rating.toDouble) }\nratings.cache\nval alsModel = ALS.train(ratings, 50, 10, 0.1)","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.recommendation.ALS\nimport org.apache.spark.mllib.recommendation.Rating\nrawData: org.apache.spark.rdd.RDD[String] = /home/david/spark/ml-100k/u.data MapPartitionsRDD[221] at textFile at <console>:47\nrawRatings: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[222] at map at <console>:48\nratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[223] at map at <console>:49\nalsModel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@509d869\n"},{"metadata":{},"data":{"text/html":"org.apache.spark.mllib.recommendation.MatrixFactorizationModel@509d869\n <div class='pull-right text-info'><small>3 seconds 266 milliseconds</small></div>"},"output_type":"execute_result","execution_count":9}]},{"metadata":{},"cell_type":"markdown","source":"## 取出使用者跟商品向量"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"import org.apache.spark.mllib.linalg.Vectors\nval movieFactors = alsModel.productFeatures.map { case (id, factor) => (id, Vectors.dense(factor)) }\nval movieVectors = movieFactors.map(_._2)\nval userFactors = alsModel.userFeatures.map { case (id, factor) => (id, Vectors.dense(factor)) }\nval userVectors = userFactors.map(_._2)","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.Vectors\nmovieFactors: org.apache.spark.rdd.RDD[(Int, org.apache.spark.mllib.linalg.Vector)] = MapPartitionsRDD[431] at map at <console>:50\nmovieVectors: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[432] at map at <console>:51\nuserFactors: org.apache.spark.rdd.RDD[(Int, org.apache.spark.mllib.linalg.Vector)] = MapPartitionsRDD[433] at map at <console>:52\nuserVectors: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[434] at map at <console>:53\n"},{"metadata":{},"data":{"text/html":"MapPartitionsRDD[434] at map at &lt;console&gt;:53\n <div class='pull-right text-info'><small>349 milliseconds</small></div>"},"output_type":"execute_result","execution_count":10}]},{"metadata":{},"cell_type":"markdown","source":"## 使用KMean 分群"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"import org.apache.spark.mllib.clustering.KMeans\nval numClusters = 5\nval numIterations = 10\nval numRuns = 3\nval movieClusterModel = KMeans.train(movieVectors, numClusters, numIterations, numRuns)\n\n// train user model\nval userClusterModel = KMeans.train(userVectors, numClusters, numIterations, numRuns)","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.clustering.KMeans\nnumClusters: Int = 5\nnumIterations: Int = 10\nnumRuns: Int = 3\nmovieClusterModel: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@7960aa09\nuserClusterModel: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@393b7320\n"},{"metadata":{},"data":{"text/html":"org.apache.spark.mllib.clustering.KMeansModel@393b7320\n <div class='pull-right text-info'><small>2 seconds 207 milliseconds</small></div>"},"output_type":"execute_result","execution_count":11}]},{"metadata":{},"cell_type":"markdown","source":"## 預測分析"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"// predict a movie cluster for movie 1\nval movie1 = movieVectors.first\nval movieCluster = movieClusterModel.predict(movie1)\nprintln(movieCluster)\n// 4\n// predict clusters for all movies\nval predictions = movieClusterModel.predict(movieVectors)\nprintln(predictions.take(10).mkString(\",\"))\n// 0,0,1,1,2,1,0,1,1,1","outputs":[{"name":"stdout","output_type":"stream","text":"3\n3,3,3,2,1,2,3,1,0,4\nmovie1: org.apache.spark.mllib.linalg.Vector = [-0.17038722336292267,0.30512890219688416,-0.19044385850429535,0.029211249202489853,0.07909884303808212,0.33553779125213623,-0.19932611286640167,0.16521108150482178,-0.1992475688457489,0.5204524397850037,0.20352190732955933,-0.44671374559402466,-0.5318823456764221,-0.01053295936435461,0.19527560472488403,0.15828396379947662,0.15264756977558136,-0.3316074013710022,-0.18541574478149414,-0.08503274619579315,-0.057886965572834015,-0.13328860700130463,-0.10193203389644623,-0.1925235539674759,0.25290003418922424,-0.16767598688602448,0.07453500479459763,-0.23911011219024658,0.09705426543951035,0.15329593420028687,-0.1736236810684204,-0.020078636705875397,0.02362755686044693,0.467596173286438,0.4923512041568756,0.7460855841636658,-0.186841681599617..."},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>391 milliseconds</small></div>"},"output_type":"execute_result","execution_count":12}]},{"metadata":{},"cell_type":"markdown","source":"## 取出近似的電影"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"// inspect the movie clusters, by looking at the movies that are closest to each cluster center\n\n// define Euclidean distance function\nimport breeze.linalg._\nimport breeze.numerics.pow\ndef computeDistance(v1: DenseVector[Double], v2: DenseVector[Double]): Double = pow(v1 - v2, 2).sum\n\n// join titles with the factor vectors, and compute the distance of each vector from the assigned cluster center\nval titlesWithFactors = titlesAndGenres.join(movieFactors)\nval moviesAssigned = titlesWithFactors.map { case (id, ((title, genres), vector)) => \n\tval pred = movieClusterModel.predict(vector)\n\tval clusterCentre = movieClusterModel.clusterCenters(pred)\n\tval dist = computeDistance(DenseVector(clusterCentre.toArray), DenseVector(vector.toArray))\n\t(id, title, genres.mkString(\" \"), pred, dist) \n}\nval clusterAssignments = moviesAssigned.groupBy { case (id, title, genres, cluster, dist) => cluster }.collectAsMap \n\nfor ( (k, v) <- clusterAssignments.toSeq.sortBy(_._1)) {\n\tprintln(s\"Cluster $k:\")\n\tval m = v.toSeq.sortBy(_._5)\n\tprintln(m.take(20).map { case (_, title, genres, _, d) => (title, genres, d) }.mkString(\"\\n\")) \n\tprintln(\"=====\\n\")\n}","outputs":[{"name":"stdout","output_type":"stream","text":"warning: there was one deprecation warning; re-run with -deprecation for details\nCluster 0:\n(Machine, The (1994),Comedy Horror,0.08167405468076337)\n(Johnny 100 Pesos (1993),Action Drama,0.12111082961263293)\n(Being Human (1993),Drama,0.13362279563212523)\n(Amityville 1992: It's About Time (1992),Horror,0.1625298784279984)\n(Amityville: A New Generation (1993),Horror,0.1625298784279984)\n(War at Home, The (1996),Drama,0.16297568616823893)\n(Venice/Venice (1992),Drama,0.19011203151679754)\n(Crows and Sparrows (1949),Drama,0.19483966651238402)\n(Catwalk (1995),Documentary,0.19984984576886322)\n(Amityville: Dollhouse (1996),Horror,0.20578216110282058)\n(Somebody to Love (1994),Drama,0.20790243783401827)\n(Boys in Venice (1996),Drama,0.20790243783401827)\n(Coldblooded (1995),Action,0.21211529622357467)\n(Falling in Love Again (1980),Comedy,0.2129572402444489)\n(Gordy (1995),Comedy,0.21299905190331084)\n(Small Faces (1995),Drama,0.2187046215954066)\n(Sexual Life of the Belgians, The (1994),Comedy,0.23160062019760122)\n(Sprung (1997),Comedy,0.23688436936431626)\n(Time Tracers (1995),Action Adventure Sci-Fi,0.2401058690866697)\n(Homage (1995),Drama,0.2422995659776885)\n=====\n\nCluster 1:\n(Witness (1985),Drama Romance Thriller,0.24338896820189476)\n(Angel and the Badman (1947),Western,0.3555764991979073)\n(Scream of Stone (Schrei aus Stein) (1991),Drama,0.36319736517282974)\n(Nelly & Monsieur Arnaud (1995),Drama,0.36788040961823265)\n(Mamma Roma (1962),Drama,0.39982515367865046)\n(Love and Other Catastrophes (1996),Romance,0.41123377427200314)\n(Beans of Egypt, Maine, The (1994),Drama,0.41828375791534866)\n(Spirits of the Dead (Tre passi nel delirio) (1968),Horror,0.43564429350974987)\n(Cosi (1996),Comedy,0.46165950963785535)\n(Celestial Clockwork (1994),Comedy,0.46410147240210425)\n(Ed's Next Move (1996),Comedy,0.4721308711970003)\n(Object of My Affection, The (1998),Comedy Romance,0.4909580959855169)\n(Third Man, The (1949),Mystery Thriller,0.49567005340240977)\n(Pushing Hands (1992),Comedy,0.4994221463682813)\n(Substance of Fire, The (1996),Drama,0.4994694769248873)\n(Price Above Rubies, A (1998),Drama,0.5025769128635926)\n(Spellbound (1945),Mystery Romance Thriller,0.5058416546756589)\n(Enfer, L' (1994),Drama,0.5160033953135801)\n(Run of the Country, The (1995),Drama,0.5163605153269819)\n(Stranger, The (1994),Action,0.518258316582379)\n=====\n\nCluster 2:\n(King of the Hill (1993),Drama,0.2370551363875544)\n(All Over Me (1997),Drama,0.23708144708212675)\n(Gate of Heavenly Peace, The (1995),Documentary,0.3169773564087671)\n(Wings of Courage (1995),Adventure Romance,0.339286923007907)\n(Walking Dead, The (1995),Drama War,0.3930400112497441)\n(Killer: A Journal of Murder (1995),Crime Drama,0.41083549745349)\n(Land and Freedom (Tierra y libertad) (1995),War,0.42749418068620343)\n(Eighth Day, The (1996),Drama,0.42749418068620343)\n(Dadetown (1995),Documentary,0.42749418068620343)\n(Big One, The (1997),Comedy Documentary,0.42749418068620343)\n(� k�ldum klaka (Cold Fever) (1994),Comedy Drama,0.42749418068620343)\n(Girls Town (1996),Drama,0.42749418068620343)\n(Silence of the Palace, The (Saimt el Qusur) (1994),Drama,0.42749418068620343)\n(Normal Life (1996),Crime Drama,0.42749418068620343)\n(Two Friends (1986) ,Drama,0.42749418068620343)\n(Hana-bi (1997),Comedy Crime Drama,0.42749418068620343)\n(Sweet Nothing (1995),Drama,0.44496607601625365)\n(I Like It Like That (1994),Comedy Drama Romance,0.4621763557559304)\n(I Can't Sleep (J'ai pas sommeil) (1994),Drama Thriller,0.5068801427431355)\n(Faces (1968),Drama,0.5120738580591253)\n=====\n\nCluster 3:\n(Last Time I Saw Paris, The (1954),Drama,0.16087498812085563)\n(Substance of Fire, The (1996),Drama,0.2084786037736111)\n(Wife, The (1995),Comedy Drama,0.37116336031268626)\n(Apollo 13 (1995),Action Drama Thriller,0.3814593673186543)\n(Wedding Gift, The (1994),Drama,0.39511919133219364)\n(All Things Fair (1996),Drama,0.39691004380263756)\n(Glory (1989),Action Drama War,0.4066289550935913)\n(20,000 Leagues Under the Sea (1954),Adventure Children's Fantasy Sci-Fi,0.42644093466501803)\n(Commandments (1997),Romance,0.4304100297895641)\n(Prefontaine (1997),Drama,0.43318376263918296)\n(Quiz Show (1994),Drama,0.4588053970526781)\n(Mr. Wonderful (1993),Comedy Romance,0.46121261087286675)\n(African Queen, The (1951),Action Adventure Romance War,0.4794378186442396)\n(Farewell to Arms, A (1932),Romance War,0.492270690289245)\n(When Harry Met Sally... (1989),Comedy Romance,0.49364261443397817)\n(They Made Me a Criminal (1939),Crime Drama,0.49620757463085235)\n(Right Stuff, The (1983),Drama,0.4970254001718215)\n(Dave (1993),Comedy Romance,0.5006102982627825)\n(In the Line of Fire (1993),Action Thriller,0.5128489916856632)\n(Amadeus (1984),Drama Mystery,0.516558702880479)\n=====\n\nCluster 4:\n(Angela (1995),Drama,0.2703447458399174)\n(Moonlight and Valentino (1995),Drama Romance,0.3293212244266817)\n(Blue Chips (1994),Drama,0.35648633501103444)\n(Johns (1996),Drama,0.3767743780354098)\n(Outlaw, The (1943),Western,0.3989649687495046)\n(Outbreak (1995),Action Drama Thriller,0.445097352934717)\n(Mr. Jones (1993),Drama Romance,0.46351210435980666)\n(Intimate Relations (1996),Comedy,0.49345413577934744)\n(Air Up There, The (1994),Comedy,0.5076905233759611)\n(River Wild, The (1994),Action Thriller,0.5130678616452607)\n(Wedding Bell Blues (1996),Comedy,0.5257753986883046)\n(Tainted (1998),Comedy Thriller,0.5257753986883046)\n(Next Step, The (1995),Drama,0.5257753986883046)\n(Nightwatch (1997),Horror Thriller,0.527725878932717)\n(For Love or Money (1993),Comedy,0.5323453053854598)\n(Target (1995),Action Drama,0.5627303882053633)\n(Pagemaster, The (1994),Action Adventure Animation Children's Fantasy,0.564758644817361)\n(New Jersey Drive (1995),Crime Drama,0.5766266802554131)\n(Stag (1997),Action Thriller,0.5870370808010328)\n(Santa Clause, The (1994),Children's Comedy,0.5950675543613835)\n=====\n\nimport breeze.linalg._\nimport breeze.numerics.pow\ncomputeDistance: (v1: breeze.linalg.DenseVector[Double], v2: breeze.linalg.DenseVector[Double])Double\ntitlesWithFactors: org.apache.spark.rdd.RDD[(Int, ((String, Seq[String]), org.apache.spark.mllib.linalg.Vector))] = MapPartitionsRDD[532] at join at <console>:79\nmoviesAssigned: org.apache.spark.rdd.RDD[(Int, String, String, Int, Double)] = MapPartitionsRDD[533] at map at <console>:80\nclusterAssignments: scala.collection.Map[Int,Iterable[(Int, String, String, Int, Double)]] = Map(2 -> CompactBuffer((772,Kids (1995),Drama,2,2.3592920866396874), (324,Lost Highway (1997),Mystery,2,3.0259225794054245), (320,Paradise Lost: The Child Murders at Robin Hood Hills (1996),Documentary,2,2.8439990432401383), (752,Replacement Killers, The (1998),Acti..."},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>1 second 572 milliseconds</small></div>"},"output_type":"execute_result","execution_count":13}]},{"metadata":{},"cell_type":"markdown","source":"## 評估分群模型"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"// clustering mathematical evaluation\n\n// compute the cost (WCSS) on for movie and user clustering\nval movieCost = movieClusterModel.computeCost(movieVectors)\nval userCost = userClusterModel.computeCost(userVectors)\nprintln(\"WCSS for movies: \" + movieCost)\nprintln(\"WCSS for users: \" + userCost)\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"WCSS for movies: 2297.9143070854466\nWCSS for users: 1481.6351220851614\nmovieCost: Double = 2297.9143070854466\nuserCost: Double = 1481.6351220851614\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>386 milliseconds</small></div>"},"output_type":"execute_result","execution_count":14}]},{"metadata":{},"cell_type":"markdown","source":"## 交叉驗證電影分群"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"// cross-validation for movie clusters\nval trainTestSplitMovies = movieVectors.randomSplit(Array(0.6, 0.4), 123)\nval trainMovies = trainTestSplitMovies(0)\nval testMovies = trainTestSplitMovies(1)\nval costsMovies = Seq(2, 3, 4, 5, 10, 20).map { k => (k, KMeans.train(trainMovies, numIterations, k, numRuns).computeCost(testMovies)) }\nprintln(\"Movie clustering cross-validation:\")\ncostsMovies.foreach { case (k, cost) => println(f\"WCSS for K=$k id $cost%2.2f\") }","outputs":[{"name":"stdout","output_type":"stream","text":"Movie clustering cross-validation:\nWCSS for K=2 id 878.75\nWCSS for K=3 id 858.81\nWCSS for K=4 id 855.62\nWCSS for K=5 id 854.55\nWCSS for K=10 id 858.84\nWCSS for K=20 id 853.84\ntrainTestSplitMovies: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector]] = Array(PartitionwiseSampledRDD[538] at randomSplit at <console>:64, PartitionwiseSampledRDD[539] at randomSplit at <console>:64)\ntrainMovies: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = PartitionwiseSampledRDD[538] at randomSplit at <console>:64\ntestMovies: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = PartitionwiseSampledRDD[539] at randomSplit at <console>:64\ncostsMovies: Seq[(Int, Double)] = List((2,878.7452657883052), (3,858.8136708079846), (4,855.6229175060934), (5,854.5499620800427), (10,858.8412616768978), (20,853.8395859060984))\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>4 seconds 816 milliseconds</small></div>"},"output_type":"execute_result","execution_count":15}]},{"metadata":{},"cell_type":"markdown","source":"## 交叉驗證使用者分群"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"// cross-validation for user clusters\nval trainTestSplitUsers = userVectors.randomSplit(Array(0.6, 0.4), 123)\nval trainUsers = trainTestSplitUsers(0)\nval testUsers = trainTestSplitUsers(1)\nval costsUsers = Seq(2, 3, 4, 5, 10, 20).map { k => (k, KMeans.train(trainUsers, numIterations, k, numRuns).computeCost(testUsers)) }\nprintln(\"User clustering cross-validation:\")\ncostsUsers.foreach { case (k, cost) => println(f\"WCSS for K=$k id $cost%2.2f\") }","outputs":[{"name":"stdout","output_type":"stream","text":"User clustering cross-validation:\nWCSS for K=2 id 590.60\nWCSS for K=3 id 590.03\nWCSS for K=4 id 586.78\nWCSS for K=5 id 589.79\nWCSS for K=10 id 586.72\nWCSS for K=20 id 586.77\ntrainTestSplitUsers: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector]] = Array(PartitionwiseSampledRDD[796] at randomSplit at <console>:64, PartitionwiseSampledRDD[797] at randomSplit at <console>:64)\ntrainUsers: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = PartitionwiseSampledRDD[796] at randomSplit at <console>:64\ntestUsers: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = PartitionwiseSampledRDD[797] at randomSplit at <console>:64\ncostsUsers: Seq[(Int, Double)] = List((2,590.5969702567295), (3,590.0252257024098), (4,586.7824658636919), (5,589.7911367402281), (10,586.7228207870726), (20,586.7673773350825))\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>3 seconds 856 milliseconds</small></div>"},"output_type":"execute_result","execution_count":16}]}],"nbformat":4}